import Testing
import Foundation
@testable import BitcoinBase

/// Bitcoin Core data driven tests executed by [https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp].
struct SighashTests {

    /// Translated test vectors from `src/test/data/sighash.json`..
    @Test("Sighash test vectors", arguments: [
        // Format is "raw_transaction, script, input_index, hashType, signature_hash (result)"
        ([0x90, 0x7c, 0x2b, 0xc5, 0x03, 0xad, 0xe1, 0x1c, 0xc3, 0xb0, 0x4e, 0xb2, 0x91, 0x8b, 0x6f, 0x54, 0x7b, 0x06, 0x30, 0xab, 0x56, 0x92, 0x73, 0x82, 0x47, 0x48, 0xc8, 0x7e, 0xa1, 0x4b, 0x06, 0x96, 0x52, 0x6c, 0x66, 0xba, 0x74, 0x02, 0x00, 0x00, 0x00, 0x04, 0xab, 0x65, 0xab, 0xab, 0xfd, 0x1f, 0x9b, 0xdd, 0x4e, 0xf0, 0x73, 0xc7, 0xaf, 0xc4, 0xae, 0x00, 0xda, 0x8a, 0x66, 0xf4, 0x29, 0xc9, 0x17, 0xa0, 0x08, 0x1a, 0xd1, 0xe1, 0xda, 0xbc, 0xe2, 0x8d, 0x37, 0x3e, 0xab, 0x81, 0xd8, 0x62, 0x8d, 0xe8, 0x02, 0x00, 0x00, 0x00, 0x09, 0x6a, 0xab, 0x52, 0x53, 0xab, 0x52, 0x00, 0x00, 0x52, 0xad, 0x04, 0x2b, 0x5f, 0x25, 0xef, 0xb3, 0x3b, 0xee, 0xc9, 0xf3, 0x36, 0x4e, 0x8a, 0x91, 0x39, 0xe8, 0x43, 0x9d, 0x9d, 0x7e, 0x26, 0x52, 0x9c, 0x3c, 0x30, 0xb6, 0xc3, 0xfd, 0x89, 0xf8, 0x68, 0x4c, 0xfd, 0x68, 0xea, 0x02, 0x00, 0x00, 0x00, 0x09, 0xab, 0x53, 0x52, 0x65, 0x00, 0x63, 0x6a, 0x52, 0xab, 0x59, 0x9a, 0xc2, 0xfe, 0x02, 0xa5, 0x26, 0xed, 0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x53, 0x53, 0x00, 0x51, 0x63, 0x52, 0x51, 0x51, 0x64, 0x37, 0x0e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x63, 0x00, 0xab, 0x2e, 0xc2, 0x29], [UInt8](), 2, 1864164639, [0x31, 0xaf, 0x16, 0x7a, 0x6c, 0xf3, 0xf9, 0xd5, 0xf6, 0x87, 0x5c, 0xaa, 0x4d, 0x31, 0x70, 0x4c, 0xeb, 0x0e, 0xba, 0x07, 0x8d, 0x13, 0x2b, 0x78, 0xda, 0xb5, 0x2c, 0x3b, 0x89, 0x97, 0x31, 0x7e]),
        ([0xa0, 0xaa, 0x31, 0x26, 0x04, 0x16, 0x21, 0xa6, 0xde, 0xa5, 0xb8, 0x00, 0x14, 0x1a, 0xa6, 0x96, 0xda, 0xf2, 0x84, 0x08, 0x95, 0x9d, 0xfb, 0x2d, 0xf9, 0x60, 0x95, 0xdb, 0x9f, 0xa4, 0x25, 0xad, 0x3f, 0x42, 0x7f, 0x2f, 0x61, 0x03, 0x00, 0x00, 0x00, 0x01, 0x53, 0x60, 0x29, 0x0e, 0x9c, 0x60, 0x63, 0xfa, 0x26, 0x91, 0x2c, 0x2e, 0x7f, 0xb6, 0xa0, 0xad, 0x80, 0xf1, 0xc5, 0xfe, 0xa1, 0x77, 0x1d, 0x42, 0xf1, 0x29, 0x76, 0x09, 0x2e, 0x7a, 0x85, 0xa4, 0x22, 0x9f, 0xdb, 0x6e, 0x89, 0x00, 0x00, 0x00, 0x00, 0x01, 0xab, 0xc1, 0x09, 0xf6, 0xe4, 0x76, 0x88, 0xac, 0x0e, 0x46, 0x82, 0x98, 0x87, 0x85, 0x74, 0x46, 0x02, 0xb8, 0xc8, 0x72, 0x28, 0xfc, 0xef, 0x06, 0x95, 0x08, 0x5e, 0xdf, 0x19, 0x08, 0x8a, 0xf1, 0xa9, 0xdb, 0x12, 0x6e, 0x93, 0x00, 0x00, 0x00, 0x00, 0x06, 0x65, 0x51, 0x6a, 0xac, 0x53, 0x6a, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xe5, 0x3e, 0x08, 0x06, 0xe1, 0x2d, 0xfd, 0x05, 0xd6, 0x7a, 0xc6, 0x8f, 0x47, 0x68, 0xfd, 0xbe, 0x23, 0xfc, 0x48, 0xac, 0xe2, 0x2a, 0x5a, 0xa8, 0xba, 0x04, 0xc9, 0x6d, 0x58, 0xe2, 0x75, 0x03, 0x00, 0x00, 0x00, 0x09, 0xac, 0x51, 0xab, 0xac, 0x63, 0xab, 0x51, 0x53, 0x65, 0x05, 0x24, 0xaa, 0x68, 0x04, 0x55, 0xce, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x9e, 0x50, 0x03, 0x00, 0x00, 0x00, 0x00, 0x08, 0x63, 0x6a, 0x00, 0xac, 0x52, 0x65, 0x63, 0xac, 0x50, 0x51, 0xee, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0xab, 0xac, 0xab, 0xd2, 0xb6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x51, 0x65, 0x63, 0x91, 0x0f, 0xb6, 0xb5], [0x65], 0, -1391424484, [0x48, 0xd6, 0xa1, 0xbd, 0x2c, 0xd9, 0xee, 0xc5, 0x4e, 0xb8, 0x66, 0xfc, 0x71, 0x20, 0x94, 0x18, 0xa9, 0x50, 0x40, 0x2b, 0x5d, 0x7e, 0x52, 0x36, 0x3b, 0xfb, 0x75, 0xc9, 0x8e, 0x14, 0x11, 0x75]),
        ([0x6e, 0x7e, 0x9d, 0x4b, 0x04, 0xce, 0x17, 0xaf, 0xa1, 0xe8, 0x54, 0x6b, 0x62, 0x7b, 0xb8, 0xd8, 0x9a, 0x6a, 0x7f, 0xef, 0xd9, 0xd8, 0x92, 0xec, 0x8a, 0x19, 0x2d, 0x79, 0xc2, 0xce, 0xaf, 0xc0, 0x16, 0x94, 0xa6, 0xa7, 0xe7, 0x03, 0x00, 0x00, 0x00, 0x09, 0x53, 0xac, 0x6a, 0x51, 0x00, 0x63, 0x53, 0x63, 0x6a, 0x33, 0xbc, 0xed, 0x15, 0x44, 0xf7, 0x97, 0xf0, 0x8c, 0xee, 0xd0, 0x2f, 0x10, 0x8d, 0xa2, 0x2c, 0xd2, 0x4c, 0x9e, 0x78, 0x09, 0xa4, 0x46, 0xc6, 0x1e, 0xb3, 0x89, 0x59, 0x14, 0x50, 0x8a, 0xc9, 0x1f, 0x07, 0x05, 0x3a, 0x01, 0x00, 0x00, 0x00, 0x05, 0x51, 0x63, 0xab, 0x51, 0x6a, 0xff, 0xff, 0xff, 0xff, 0x11, 0xdc, 0x54, 0xee, 0xe8, 0xf9, 0xe4, 0xff, 0x0b, 0xcf, 0x6b, 0x1a, 0x1a, 0x35, 0xb1, 0xcd, 0x10, 0xd6, 0x33, 0x89, 0x57, 0x13, 0x75, 0x50, 0x1a, 0xf7, 0x44, 0x40, 0x73, 0xbc, 0xec, 0x3c, 0x02, 0x00, 0x00, 0x00, 0x04, 0x6a, 0xab, 0x53, 0x51, 0x4a, 0x82, 0x1f, 0x0c, 0xe3, 0x95, 0x6e, 0x23, 0x5f, 0x71, 0xe4, 0xc6, 0x9d, 0x91, 0xab, 0xe1, 0xe9, 0x3f, 0xb7, 0x03, 0xbd, 0x33, 0x03, 0x9a, 0xc5, 0x67, 0x24, 0x9e, 0xd3, 0x39, 0xbf, 0x0b, 0xa0, 0x88, 0x3e, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x63, 0xab, 0x65, 0x00, 0x00, 0x65, 0xac, 0x65, 0x4b, 0xec, 0x3c, 0xc5, 0x04, 0xbc, 0xf4, 0x99, 0x02, 0x00, 0x00, 0x00, 0x00, 0x05, 0xab, 0x6a, 0x52, 0xab, 0xac, 0x64, 0xeb, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07, 0x6a, 0x6a, 0x53, 0x51, 0x65, 0x00, 0x53, 0xbb, 0xbc, 0x13, 0x01, 0x00, 0x00, 0x00, 0x00, 0x05, 0x6a, 0x6a, 0xab, 0x53, 0xab, 0xd6, 0xe1, 0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x6a, 0x51, 0xc4, 0xe5, 0x09, 0xb8], [0xac, 0xab, 0x65, 0x51, 0x51], 0, 479279909, [0x2a, 0x3d, 0x95, 0xb0, 0x92, 0x37, 0xb7, 0x20, 0x34, 0xb2, 0x3f, 0x2d, 0x2b, 0xb2, 0x9f, 0xa3, 0x2a, 0x58, 0xab, 0x5c, 0x6a, 0xa7, 0x2f, 0x6a, 0xaf, 0xdf, 0xa1, 0x78, 0xab, 0x1d, 0xd0, 0x1c]),
        ([0x73, 0x10, 0x7c, 0xbd, 0x02, 0x5c, 0x22, 0xeb, 0xc8, 0xc3, 0xe0, 0xa4, 0x7b, 0x2a, 0x76, 0x07, 0x39, 0x21, 0x6a, 0x52, 0x8d, 0xe8, 0xd4, 0xda, 0xb5, 0xd4, 0x5c, 0xbe, 0xb3, 0x05, 0x1c, 0xeb, 0xae, 0x73, 0xb0, 0x1c, 0xa1, 0x02, 0x00, 0x00, 0x00, 0x07, 0xab, 0x63, 0x53, 0x65, 0x6a, 0x63, 0x6a, 0xff, 0xff, 0xff, 0xff, 0xe2, 0x68, 0x16, 0xdf, 0xfc, 0x67, 0x08, 0x41, 0xe6, 0xa6, 0xc8, 0xc6, 0x1c, 0x58, 0x6d, 0xa4, 0x01, 0xdf, 0x12, 0x61, 0xa3, 0x30, 0xa6, 0xc6, 0xb3, 0xdd, 0x9f, 0x9a, 0x07, 0x89, 0xbc, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0xac, 0x65, 0x52, 0xac, 0x6a, 0xac, 0x51, 0xff, 0xff, 0xff, 0xff, 0x01, 0x74, 0xa8, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0xac, 0x52, 0x51, 0x51, 0x00, 0x00, 0x00, 0x00], [0x51, 0x63, 0xac, 0x63, 0x63, 0x51, 0x51, 0xac], 1, 1190874345, [0x06, 0xe3, 0x28, 0xde, 0x26, 0x3a, 0x87, 0xb0, 0x9b, 0xea, 0xbe, 0x22, 0x2a, 0x21, 0x62, 0x7a, 0x6e, 0xa5, 0xc7, 0xf5, 0x60, 0x03, 0x0d, 0xa3, 0x16, 0x10, 0xc4, 0x61, 0x1f, 0x4a, 0x46, 0xbc]),
        ([0xe9, 0x3b, 0xbf, 0x69, 0x02, 0xbe, 0x87, 0x29, 0x33, 0xcb, 0x98, 0x7f, 0xc2, 0x6b, 0xa0, 0xf9, 0x14, 0xfc, 0xfc, 0x2f, 0x6c, 0xe5, 0x55, 0x25, 0x85, 0x54, 0xdd, 0x99, 0x39, 0xd1, 0x20, 0x32, 0xa8, 0x53, 0x6c, 0x88, 0x02, 0x03, 0x00, 0x00, 0x00, 0x04, 0x53, 0xac, 0x53, 0x53, 0xea, 0xbb, 0x64, 0x51, 0xe0, 0x74, 0xe6, 0xfe, 0xf9, 0xde, 0x21, 0x13, 0x47, 0xd6, 0xa4, 0x59, 0x00, 0xea, 0x5a, 0xaf, 0x26, 0x36, 0xef, 0x79, 0x67, 0xf5, 0x65, 0xdc, 0xe6, 0x6f, 0xa4, 0x51, 0x80, 0x5c, 0x5c, 0xd1, 0x00, 0x00, 0x00, 0x00, 0x03, 0x52, 0x52, 0x53, 0xff, 0xff, 0xff, 0xff, 0x04, 0x7d, 0xc3, 0xe6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0x51, 0x65, 0x65, 0xac, 0x65, 0x6a, 0xab, 0xec, 0x9e, 0xea, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x63, 0x3e, 0x46, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x08, 0x0a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0xab, 0x00, 0x00, 0x00, 0x00], [0x53, 0x00, 0xac, 0x6a, 0x53, 0xab, 0x6a], 1, -886562767, [0xf0, 0x3a, 0xa4, 0xfc, 0x5f, 0x97, 0xe8, 0x26, 0x32, 0x3d, 0x0d, 0xaa, 0x03, 0x34, 0x3e, 0xbf, 0x8a, 0x34, 0xed, 0x67, 0xa1, 0xce, 0x18, 0x63, 0x1f, 0x8b, 0x88, 0xe5, 0xc9, 0x92, 0xe7, 0x98])
    ])
    func allVectors(tx: [UInt8], script: [UInt8], txIn: Int, hashType: Int32, expected: [UInt8]) throws {
        let tx = try BitcoinTx(binaryData: Data(tx))
        let script = BitcoinScript(script)

        var filteredOps = script.ops
        filteredOps.removeAll { $0 == .codeSeparator }
        let scriptCode = BitcoinScript(filteredOps).binaryData

        let sighashType = try #require(SighashType(rawValue: hashType))
        let sighash = SigHash(tx: tx, txIn: txIn, sigVersion: .base, prevout: .init(value: 0), scriptCode: scriptCode, sighashType: sighashType)
        print("value: \(sighash.value.hex)")
        #expect(sighash.value == Data(expected.reversed()))
    }
}
